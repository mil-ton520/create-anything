import { useState } from "react";
import { X, Send } from "lucide-react";

const AVAILABLE_TAGS = [
  "Marketing", "Programming", "Analysis", "Writing", 
  "Strategy", "Research", "Design", "Support"
];

const EMOJI_OPTIONS = [
  "ü§ñ", "üìù", "üìä", "üíª", "‚úçÔ∏è", "üíº", "üîç", "üé®", 
  "üöÄ", "üí°", "üìà", "üß†", "‚ö°", "üéØ", "üîß", "üìö"
];

export function CreatePersonaModal({ 
  isOpen, 
  onClose, 
  onSave, 
  workspaceId,
  className = "" 
}) {
  const [formData, setFormData] = useState({
    name: "",
    system_prompt: "",
    avatar_emoji: "ü§ñ",
    tags: []
  });
  const [testMode, setTestMode] = useState(false);
  const [testInput, setTestInput] = useState("");
  const [testResponse, setTestResponse] = useState("");
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleTagToggle = (tag) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.includes(tag) 
        ? prev.tags.filter(t => t !== tag)
        : [...prev.tags, tag]
    }));
  };

  const handleTest = async () => {
    if (!testInput.trim() || !formData.system_prompt.trim()) return;

    setLoading(true);
    try {
      // Mock test response for now - in real implementation would call API
      setTestResponse(`Test response from ${formData.name || "your persona"}: This is a preview of how I would respond based on the system prompt you've defined. The actual response would be generated by the AI model using your custom instructions.`);
    } catch (error) {
      console.error('Test failed:', error);
      setTestResponse("Test failed. Please check your system prompt and try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!formData.name.trim() || !formData.system_prompt.trim()) {
      alert("Name and system prompt are required");
      return;
    }

    setSaving(true);
    try {
      const response = await fetch('/api/personas', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          workspace_id: workspaceId,
          ...formData
        })
      });

      if (response.ok) {
        const data = await response.json();
        onSave(data.persona);
        handleClose();
      } else {
        const error = await response.json();
        alert(error.error || 'Failed to create persona');
      }
    } catch (error) {
      console.error('Failed to save persona:', error);
      alert('Failed to create persona');
    } finally {
      setSaving(false);
    }
  };

  const handleClose = () => {
    setFormData({
      name: "",
      system_prompt: "",
      avatar_emoji: "ü§ñ",
      tags: []
    });
    setTestMode(false);
    setTestInput("");
    setTestResponse("");
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-[#E5E7EB]">
          <h2 className="text-xl font-semibold text-[#0A0A0A]">Create Persona</h2>
          <button
            onClick={handleClose}
            className="p-2 hover:bg-[#F4F5F7] rounded-lg transition-colors"
          >
            <X size={20} className="text-[#6B7280]" />
          </button>
        </div>

        <div className="p-6 space-y-6">
          {!testMode ? (
            <>
              {/* Basic Info */}
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-[#0A0A0A] mb-2">
                    Name *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => handleInputChange("name", e.target.value)}
                    placeholder="e.g., Expert Copywriter"
                    className="w-full px-4 py-3 border border-[#E5E7EB] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF7A1A] focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-[#0A0A0A] mb-2">
                    System Prompt *
                  </label>
                  <textarea
                    value={formData.system_prompt}
                    onChange={(e) => handleInputChange("system_prompt", e.target.value)}
                    placeholder="You are an expert marketing copywriter focused on conversion and engagement. Create compelling copy that drives results..."
                    rows={6}
                    className="w-full px-4 py-3 border border-[#E5E7EB] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF7A1A] focus:border-transparent resize-none"
                  />
                  <div className="text-xs text-[#6B7280] mt-1">
                    {formData.system_prompt.length} characters
                  </div>
                </div>
              </div>

              {/* Avatar Selection */}
              <div>
                <label className="block text-sm font-medium text-[#0A0A0A] mb-2">
                  Avatar
                </label>
                <div className="flex flex-wrap gap-2">
                  {EMOJI_OPTIONS.map((emoji) => (
                    <button
                      key={emoji}
                      onClick={() => handleInputChange("avatar_emoji", emoji)}
                      className={`w-10 h-10 rounded-lg border-2 flex items-center justify-center text-lg transition-colors ${
                        formData.avatar_emoji === emoji
                          ? "border-[#FF7A1A] bg-orange-50"
                          : "border-[#E5E7EB] hover:border-[#FF7A1A]"
                      }`}
                    >
                      {emoji}
                    </button>
                  ))}
                </div>
              </div>

              {/* Tags */}
              <div>
                <label className="block text-sm font-medium text-[#0A0A0A] mb-2">
                  Tags
                </label>
                <div className="flex flex-wrap gap-2">
                  {AVAILABLE_TAGS.map((tag) => (
                    <button
                      key={tag}
                      onClick={() => handleTagToggle(tag)}
                      className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-colors ${
                        formData.tags.includes(tag)
                          ? "bg-[#FF7A1A] text-white"
                          : "bg-[#F4F5F7] text-[#6B7280] hover:bg-[#E5E7EB]"
                      }`}
                    >
                      {tag}
                    </button>
                  ))}
                </div>
              </div>

              {/* Actions */}
              <div className="flex gap-3 pt-4">
                <button
                  onClick={() => setTestMode(true)}
                  disabled={!formData.system_prompt.trim()}
                  className="flex-1 px-4 py-3 bg-[#F4F5F7] text-[#0A0A0A] rounded-lg font-medium hover:bg-[#E5E7EB] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Test Persona
                </button>
                <button
                  onClick={handleSave}
                  disabled={!formData.name.trim() || !formData.system_prompt.trim() || saving}
                  className="flex-1 px-4 py-3 bg-[#FF7A1A] text-white rounded-lg font-medium hover:bg-[#E6691A] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {saving ? "Creating..." : "Create Persona"}
                </button>
              </div>
            </>
          ) : (
            <>
              {/* Test Mode */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium text-[#0A0A0A]">
                    Test: {formData.name || "Untitled Persona"}
                  </h3>
                  <button
                    onClick={() => setTestMode(false)}
                    className="text-sm text-[#6B7280] hover:text-[#0A0A0A]"
                  >
                    ‚Üê Back to Edit
                  </button>
                </div>

                <div className="bg-[#F4F5F7] rounded-lg p-4">
                  <div className="text-sm text-[#6B7280] mb-2">System Prompt:</div>
                  <div className="text-sm text-[#0A0A0A]">
                    {formData.system_prompt}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-[#0A0A0A] mb-2">
                    Test Input
                  </label>
                  <div className="relative">
                    <textarea
                      value={testInput}
                      onChange={(e) => setTestInput(e.target.value)}
                      placeholder="Ask your persona a question to test how it responds..."
                      rows={3}
                      className="w-full px-4 py-3 pr-12 border border-[#E5E7EB] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FF7A1A] focus:border-transparent resize-none"
                    />
                    <button
                      onClick={handleTest}
                      disabled={!testInput.trim() || loading}
                      className="absolute right-3 bottom-3 p-2 bg-[#FF7A1A] text-white rounded-lg hover:bg-[#E6691A] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Send size={16} />
                    </button>
                  </div>
                </div>

                {(testResponse || loading) && (
                  <div>
                    <label className="block text-sm font-medium text-[#0A0A0A] mb-2">
                      Response Preview
                    </label>
                    <div className="bg-white border border-[#E5E7EB] rounded-lg p-4 min-h-[100px]">
                      {loading ? (
                        <div className="flex items-center gap-2 text-[#6B7280]">
                          <div className="w-2 h-2 bg-[#FF7A1A] rounded-full animate-pulse"></div>
                          Generating test response...
                        </div>
                      ) : (
                        <div className="text-[#0A0A0A] text-sm leading-relaxed">
                          {testResponse}
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>

              {/* Test Actions */}
              <div className="flex gap-3 pt-4">
                <button
                  onClick={handleSave}
                  disabled={!formData.name.trim() || !formData.system_prompt.trim() || saving}
                  className="flex-1 px-4 py-3 bg-[#FF7A1A] text-white rounded-lg font-medium hover:bg-[#E6691A] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {saving ? "Creating..." : "Save Persona"}
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}